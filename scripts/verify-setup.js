// scripts/verify-setup.js
const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

console.log('üîç Verificando configura√ß√£o...\n')

// 1. Verificar vari√°veis de ambiente
console.log('üìã Vari√°veis de Ambiente:')
console.log('------------------------')
console.log('NEXTAUTH_SECRET:', process.env.NEXTAUTH_SECRET ? '‚úÖ Configurado' : '‚ùå N√£o configurado')
console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL || '‚ùå N√£o configurado')
console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL || '‚ùå N√£o configurado')
console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado')
console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado')

// 2. Testar conex√£o com Supabase
async function testSupabase() {
  console.log('\nüì° Testando conex√£o com Supabase:')
  console.log('----------------------------------')
  
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.log('‚ùå N√£o √© poss√≠vel testar - vari√°veis n√£o configuradas')
    return
  }

  try {
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )

    // Testar leitura da tabela users
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1)

    if (error) {
      console.log('‚ùå Erro ao conectar:', error.message)
      console.log('\nüí° Verifique se:')
      console.log('   - A tabela "users" existe no Supabase')
      console.log('   - As chaves de API est√£o corretas')
      console.log('   - O RLS est√° configurado corretamente')
    } else {
      console.log('‚úÖ Conex√£o com Supabase OK!')
      
      // Verificar se existe algum admin
      const { data: admins, error: adminError } = await supabase
        .from('users')
        .select('email, role')
        .eq('role', 'ADMIN')

      if (!adminError) {
        if (admins && admins.length > 0) {
          console.log(`‚úÖ ${admins.length} admin(s) encontrado(s):`)
          admins.forEach(admin => {
            console.log(`   - ${admin.email}`)
          })
        } else {
          console.log('‚ö†Ô∏è  Nenhum admin encontrado. Execute: npm run create-admin')
        }
      }
    }
  } catch (err) {
    console.log('‚ùå Erro geral:', err.message)
  }
}

// 3. Verificar estrutura da tabela
async function checkTableStructure() {
  console.log('\nüèóÔ∏è  Estrutura esperada da tabela "users":')
  console.log('----------------------------------------')
  console.log('- id (uuid ou text)')
  console.log('- email (text, unique)')
  console.log('- password (text)')
  console.log('- nome (text)')
  console.log('- role (text) - valores: ADMIN, USER')
  console.log('- created_at (timestamp)')
  console.log('- updated_at (timestamp)')
}

// Executar verifica√ß√µes
testSupabase().then(() => {
  checkTableStructure()
  console.log('\n‚ú® Verifica√ß√£o conclu√≠da!')
})